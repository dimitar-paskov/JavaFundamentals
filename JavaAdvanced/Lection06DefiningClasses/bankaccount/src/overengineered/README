Ненужно сложно решение, но показва доста повече ООП, както и други добри практики. Кода не е консистентен, защото съм се
опитал да покажа различни техники на някои места.

За създаването на 1 команда сме използвали Factory Pattern - https://en.wikipedia.org/wiki/Factory_method_pattern
Доста удобен подход когато имаме да създаваме много различни класове, които изхождат от 1 общ - в случая всички те са
команди.

За изпълнението на една команда сме взели част от Command Pattern - https://en.wikipedia.org/wiki/Command_pattern При
нас нямаме Runner или нещо, което да изпълнява всички команди.

За запазването на данни сме направили статичен клас който да се грижи за всички акаунти - ако не беше статичен, а всяка
команда си имаше свое поле за данните нямаше да разполагаме с всички акаунти по всяко време, което е необходимо.
Методът не е перфектен, но доста добре пасва текущите ни знания.

В BankAccountStore методът getById може да връща просто операцията this.accounts.get(id) и да проверяваме в
отделните класове дали това, което сме получили е null. Доста удобен за такива ситуации е Optional класа, както можем
да видим в DepositCommand. Методите, които има като ifPresentOrElse, or, orElseThrow и т.н. доста улесняват работата в
определени ситуации.

В GetInterestCommand напълно достатъчно е да проверим дали обекта, който връща getById е null чрез isPresent метода на
Optional, но съм намерил оправдание да използвам и try-catch.

В случая нямаме нужда интерфейс и абстрактен клас, но съм показал по простичък начин какво правят.